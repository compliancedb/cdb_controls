
README.md says
"To publish the bitbucket pull request information this artifact comes from, use the `put_bitbucket_pr` command."

However, that command is _not_ inside the image compliancedb/cdb_controls
The file bitbucket_pipe/README.md names example-file-pipeline.md
And that file contains, eg, this...
## Put Pipeline
```yaml
        script:
          - pipe: docker://compliancedb/cdb_controls-bbpipe:latest
            variables:
              CDB_PIPELINE_DEFINITION: ${BITBUCKET_CLONE_DIR}/pipe.json
              CDB_COMMAND: 'put_pipeline'
              CDB_API_TOKEN: ${CDB_API_TOKEN}
```

So we are talking about a different image here.
There is a /Dockerfile.bb_pipe which has this..

FROM compliancedb/cdb_controls:latest
COPY bitbucket_pipe/pipe.py .
COPY bitbucket_pipe/requirements.txt .
RUN pip install -r requirements.txt
ENTRYPOINT ["python3", "/app/pipe.py"]

The Makefile has a target to build an image from this 2nd Dockerfile...
IMAGE_PIPE := compliancedb/${APP}-bbpipe
build_pipe:
	@echo ${IMAGE_PIPE}
	@docker build -f Dockerfile.bb_pipe -t ${IMAGE_PIPE} .

So it starts at /app/pipe.py which is the only apparent source file.
But the base image is compliancedb/cdb_controls
so it also has access to all the existing cdb_controls code.
And in the cdb/ source there is a file bitbucket.py which is used.
This looks to be using the adapter pattern.

First command in pipe.py is put_pipeline() which has no adaption.

So first step is to create a makefile target to test inside this compliancedb/cdb_controls-bbpipe.


