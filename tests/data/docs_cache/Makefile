{
    "href_url": "https://github.com/merkely-development/change/blob/master/Makefile",
    "lines": [
        "APP    := change",
        "NAME   := ${APP}",
        "TAG    := $$(git log -1 --pretty=%h) # eg 5d72e2b",
        "SHA    := $$(git log -1 --pretty=%H) # eg 5d72e2b158be269390d4b3931ed5d0febd784fb5",
        "",
        "# sha-${TAG} is what's being built by the custom action",
        "# docker/build-push-action@v1.1.0",
        "# in .github/workflows/main.yml",
        "IMAGE  := merkely/${APP}:sha-${TAG}",
        "LATEST := merkely/${APP}:latest",
        "",
        "CONTAINER := ${NAME}",
        "",
        "MERKELY_HOST = https://app.merkely.com",
        "MERKELYPIPE = Merkelypipe.json",
        "",
        "# all non-latest images - for prune target",
        "IMAGES := $(shell docker image ls --format '{{.Repository}}:{{.Tag}}' $(NAME) | grep -v latest)",
        "",
        "ROOT_DIR := $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))",
        "",
        "CI_ENV_FILE := ${ROOT_DIR}/.github/merkely.env",
        "",
        "ifeq ($(CI),true)",
        "\t# no tty on CI",
        "\tDOCKER_RUN_TTY=",
        "\tDOCKER_RUN_INTERACTIVE=",
        "else",
        "\t# colour on terminal needs tty",
        "\tDOCKER_RUN_TTY=--tty",
        "\t# pdb needs interactive",
        "\tDOCKER_RUN_INTERACTIVE=--interactive",
        "endif",
        "",
        "# list the targets: from https://stackoverflow.com/questions/4219255/how-do-you-get-the-list-of-targets-in-a-makefile",
        ".PHONY: list",
        "list:",
        "\t@$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ \"^[#.]\") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | xargs",
        "",
        "# list installed Python packages and their version numbers",
        "pip_list:",
        "\t@docker run --rm -it --entrypoint=\"\" ${IMAGE} pip3 list",
        "",
        "# - - - - - - - - - - - - - - - - - - - -",
        "# full image rebuilds, with fresh base image, and no Docker caching",
        "",
        "rebuild: delete_base_image",
        "\t@docker build \\",
        "\t\t--file Dockerfile \\",
        "\t\t--no-cache \\",
        "\t\t--tag ${IMAGE} .",
        "\t@docker tag ${IMAGE} ${LATEST}",
        "",
        "delete_base_image:",
        "\t$(eval BASE_IMAGE = $(shell cat \"${PWD}/Dockerfile\" | head -n 1 | awk '{print $$2}'))",
        "\t@docker image rm ${BASE_IMAGE} 2> /dev/null || true",
        "",
        "# - - - - - - - - - - - - - - - - - - - -",
        "",
        "build:",
        "\t@echo ${IMAGE}",
        "\t@docker build \\",
        "\t\t--file Dockerfile \\",
        "\t\t--tag ${IMAGE} .",
        "\t@docker tag ${IMAGE} ${LATEST}",
        "",
        "# - - - - - - - - - - - - - - - - - - - -",
        "# run tests without building, by volume-mounting",
        "",
        "define SOURCE_VOLUME_MOUNTS",
        "\t--volume ${ROOT_DIR}/source:/app/source",
        "endef",
        "",
        "define TESTS_VOLUME_MOUNT",
        "    --volume ${ROOT_DIR}/tests:/app/tests",
        "endef",
        "",
        "# Don't add build as a dependency to test_unit.",
        "# If you do then .github/workflows/main.yml",
        "# will create a new docker image, overwriting the previous",
        "# one (which was pushed to dockerhub) thus losing the digest.",
        "",
        "test_unit:",
        "\tdocker rm --force ${CONTAINER} 2> /dev/null || true",
        "\t$(eval COVERAGE_DIR = tmp/coverage/unit)",
        "\trm -rf ${COVERAGE_DIR} && mkdir -p ${COVERAGE_DIR}",
        "\tdocker run \\",
        "\t\t--env TEST_ARG=${TEST_ARG} \\",
        "\t\t--name ${CONTAINER} \\",
        "\t\t${DOCKER_RUN_TTY} \\",
        "\t\t${DOCKER_RUN_INTERACTIVE} \\",
        "\t\t${SOURCE_VOLUME_MOUNTS} \\",
        "\t\t${TESTS_VOLUME_MOUNT} \\",
        "\t    --volume ${ROOT_DIR}/${COVERAGE_DIR}/htmlcov:/app/htmlcov \\",
        "\t\t--entrypoint ./tests/unit/coverage_entrypoint.sh \\",
        "\t\t\t${IMAGE} tests/unit/${TARGET}",
        "",
        "pytest_help:",
        "\t@docker run \\",
        "\t\t--entrypoint=\"\" \\",
        "\t\t--rm \\",
        "\t\t${IMAGE} \\",
        "\t\t  python3 -m pytest --help",
        "",
        "# - - - - - - - - - - - - - - - - - - - -",
        "",
        "DOCS_IMAGE := merkely/docs",
        "",
        "build_docs_image:",
        "\t@docker build --tag ${DOCS_IMAGE} ${ROOT_DIR}/docs.merkely.com/",
        "",
        "build_docs:",
        "\t@docker run \\",
        "\t\t--rm \\",
        "\t\t-v ${ROOT_DIR}/docs.merkely.com:/docs \\",
        "\t\t-v ${ROOT_DIR}:/app \\",
        "\t\t-v ${ROOT_DIR}:/docs/source/app \\",
        "\t\t${DOCS_IMAGE} make clean html",
        "\t@cp -RP ${ROOT_DIR}/docs.merkely.com/build/html/. docs/.",
        "",
        "# - - - - - - - - - - - - - - - - - - - -",
        "",
        "push:",
        "\t@docker push ${IMAGE}",
        "",
        "pull:",
        "\t@docker pull ${IMAGE}",
        "",
        "# Enter running container with a shell",
        "enter:",
        "\t@docker exec -ti ${CONTAINER} sh",
        "",
        "# Follow the container logs",
        "follow:",
        "\t@docker container logs -f ${CONTAINER}",
        "",
        "# Start a container with shell",
        "shell:",
        "\t@docker run -it --rm --name ${CONTAINER} ${IMAGE} sh",
        "",
        "# Delete all the non-latest images",
        "prune:",
        "\t@docker image rm $(IMAGES)",
        "",
        "# Get the repo statistics",
        "stats:",
        "\t@echo Commits: $$(git rev-list --count master)",
        "\t@cloc .",
        "",
        "# - - - - - - - - - - - - - - - - - - - -",
        "# Merkely commands",
        "",
        "merkely_declare_pipeline:",
        "\tdocker run \\",
        "\t\t--env MERKELY_COMMAND=declare_pipeline \\",
        "\t\t--env MERKELY_API_TOKEN=${MERKELY_API_TOKEN} \\",
        "\t\t--env MERKELY_HOST=${MERKELY_HOST} \\",
        "\t\t--env MERKELY_DRY_RUN=${MERKELY_DRY_RUN} \\",
        "\t\t--env-file ${CI_ENV_FILE} \\",
        "\t\t--rm \\",
        "\t\t--volume ${PWD}/${MERKELYPIPE}:/data/Merkelypipe.json \\",
        "\t\t${IMAGE}",
        "",
        "",
        "merkely_log_artifact:",
        "\tdocker run \\",
        "        --env MERKELY_COMMAND=log_artifact \\",
        "        --env MERKELY_FINGERPRINT=${MERKELY_FINGERPRINT} \\",
        "        --env MERKELY_IS_COMPLIANT=${MERKELY_IS_COMPLIANT} \\",
        "        --env MERKELY_ARTIFACT_GIT_COMMIT=${MERKELY_ARTIFACT_GIT_COMMIT} \\",
        "        --env MERKELY_ARTIFACT_GIT_URL=${MERKELY_ARTIFACT_GIT_URL} \\",
        "        --env MERKELY_CI_BUILD_NUMBER=${MERKELY_CI_BUILD_NUMBER} \\",
        "        --env MERKELY_CI_BUILD_URL=${MERKELY_CI_BUILD_URL} \\",
        "        --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN} \\",
        "        --env MERKELY_HOST=${MERKELY_HOST} \\",
        "        --env MERKELY_DRY_RUN=${MERKELY_DRY_RUN} \\",
        "        --env-file ${CI_ENV_FILE} \\",
        "        --rm \\",
        "        --volume=/var/run/docker.sock:/var/run/docker.sock \\",
        "        ${IMAGE}",
        "",
        "",
        "merkely_log_evidence:",
        "\tdocker run \\",
        "        --env MERKELY_COMMAND=log_evidence \\",
        "        --env MERKELY_FINGERPRINT=${MERKELY_FINGERPRINT} \\",
        "        --env MERKELY_EVIDENCE_TYPE=${MERKELY_EVIDENCE_TYPE} \\",
        "        --env MERKELY_IS_COMPLIANT=${MERKELY_IS_COMPLIANT} \\",
        "        --env MERKELY_DESCRIPTION=\"${MERKELY_DESCRIPTION}\" \\",
        "        --env MERKELY_CI_BUILD_URL=${MERKELY_CI_BUILD_URL} \\",
        "        --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN} \\",
        "        --env MERKELY_HOST=${MERKELY_HOST} \\",
        "        --env MERKELY_DRY_RUN=${MERKELY_DRY_RUN} \\",
        "        --env-file ${CI_ENV_FILE} \\",
        "        --rm \\",
        "        --volume=/var/run/docker.sock:/var/run/docker.sock \\",
        "        ${IMAGE}",
        "",
        "",
        "merkely_log_test:",
        "\tdocker run \\",
        "\t\t--env MERKELY_COMMAND=log_test \\",
        "        --env MERKELY_FINGERPRINT=${MERKELY_FINGERPRINT} \\",
        "\t\t--env MERKELY_EVIDENCE_TYPE=${MERKELY_EVIDENCE_TYPE} \\",
        "\t\t--env MERKELY_CI_BUILD_URL=${MERKELY_CI_BUILD_URL} \\",
        "\t\t--env MERKELY_API_TOKEN=${MERKELY_API_TOKEN} \\",
        "\t\t--env MERKELY_HOST=${MERKELY_HOST} \\",
        "\t\t--env MERKELY_DRY_RUN=${MERKELY_DRY_RUN} \\",
        "\t\t--env-file ${CI_ENV_FILE} \\",
        "\t\t--rm \\",
        "\t\t--volume ${MERKELY_TEST_RESULTS_DIR}:/data/junit \\",
        "\t\t--volume /var/run/docker.sock:/var/run/docker.sock \\",
        "\t\t${IMAGE}",
        "",
        "",
        "merkely_request_approval:",
        "\tdocker run \\",
        "\t\t--env MERKELY_COMMAND=request_approval \\",
        "\t\t--env MERKELY_FINGERPRINT=\"${MERKELY_FINGERPRINT}\" \\",
        "\t\t--env MERKELY_OLDEST_SRC_COMMITISH=\"${MERKELY_OLDEST_SRC_COMMITISH}\" \\",
        "\t\t--env MERKELY_NEWEST_SRC_COMMITISH=\"${MERKELY_NEWEST_SRC_COMMITISH}\" \\",
        "\t\t--env MERKELY_DESCRIPTION=\"${MERKELY_DESCRIPTION}\" \\",
        "\t\t--env MERKELY_SRC_REPO_ROOT=\"${MERKELY_SRC_REPO_ROOT}\" \\",
        "\t\t--env MERKELY_USER_DATA=\"${MERKELY_USER_DATA}\" \\",
        "\t\t--env MERKELY_API_TOKEN=\"${MERKELY_API_TOKEN}\" \\",
        "\t\t--env MERKELY_HOST=\"${MERKELY_HOST}\" \\",
        "        --env MERKELY_DRY_RUN=${MERKELY_DRY_RUN} \\",
        "        --env-file ${CI_ENV_FILE} \\",
        "\t\t--rm \\",
        "\t\t--volume ${PWD}:/src \\",
        "\t\t--volume /var/run/docker.sock:/var/run/docker.sock \\",
        "\t\tmerkely/change",
        "",
        "",
        "merkely_approve_deployment:",
        "\tdocker run \\",
        "\t\t--env MERKELY_COMMAND=approve_deployment \\",
        "\t\t--env MERKELY_FINGERPRINT=\"${MERKELY_FINGERPRINT}\" \\",
        "\t\t--env MERKELY_OLDEST_SRC_COMMITISH=\"${MERKELY_OLDEST_SRC_COMMITISH}\" \\",
        "\t\t--env MERKELY_NEWEST_SRC_COMMITISH=\"${MERKELY_NEWEST_SRC_COMMITISH}\" \\",
        "\t\t--env MERKELY_DESCRIPTION=\"${MERKELY_DESCRIPTION}\" \\",
        "\t\t--env MERKELY_SRC_REPO_ROOT=\"${MERKELY_SRC_REPO_ROOT}\" \\",
        "\t\t--env MERKELY_USER_DATA=\"${MERKELY_USER_DATA}\" \\",
        "\t\t--env MERKELY_API_TOKEN=\"${MERKELY_API_TOKEN}\" \\",
        "\t\t--env MERKELY_HOST=\"${MERKELY_HOST}\" \\",
        "        --env MERKELY_DRY_RUN=${MERKELY_DRY_RUN} \\",
        "        --env-file ${CI_ENV_FILE} \\",
        "\t\t--rm \\",
        "\t\t--volume ${PWD}:/src \\",
        "\t\t--volume /var/run/docker.sock:/var/run/docker.sock \\",
        "\t\tmerkely/change",
        "",
        "",
        "merkely_control_deployment:",
        "\tdocker run \\",
        "\t\t--env MERKELY_COMMAND=control_deployment \\",
        "\t\t--env MERKELY_FINGERPRINT=${MERKELY_FINGERPRINT} \\",
        "\t\t--env MERKELY_API_TOKEN=${MERKELY_API_TOKEN} \\",
        "\t\t--env MERKELY_HOST=${MERKELY_HOST} \\",
        "\t\t--env MERKELY_DRY_RUN=${MERKELY_DRY_RUN} \\",
        "\t\t--env-file ${CI_ENV_FILE} \\",
        "\t\t--rm \\",
        "\t\t--volume /var/run/docker.sock:/var/run/docker.sock \\",
        "\t\tmerkely/change",
        "",
        "",
        "merkely_log_deployment:",
        "\tdocker run \\",
        "        --env MERKELY_COMMAND=log_deployment \\",
        "        --env MERKELY_FINGERPRINT=${MERKELY_FINGERPRINT} \\",
        "        --env MERKELY_CI_BUILD_URL=${MERKELY_CI_BUILD_URL} \\",
        "        --env MERKELY_DESCRIPTION=\"${MERKELY_DESCRIPTION}\" \\",
        "        --env MERKELY_ENVIRONMENT=${MERKELY_ENVIRONMENT} \\",
        "        --env MERKELY_USER_DATA=${MERKELY_USER_DATA} \\",
        "        --env MERKELY_API_TOKEN=${MERKELY_API_TOKEN} \\",
        "        --env MERKELY_HOST=${MERKELY_HOST} \\",
        "        --env MERKELY_DRY_RUN=${MERKELY_DRY_RUN} \\",
        "        --env-file ${CI_ENV_FILE} \\",
        "        --rm \\",
        "        --volume=/var/run/docker.sock:/var/run/docker.sock \\",
        "        ${IMAGE}"
    ]
}