# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request events
on:
  push:
    branches:
      - '**'
      - '!latest'
    pull_request: []

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

        
    - name: Build and push Docker image
      uses: docker/build-push-action@v1.1.0
      env:
        SUPER_SECRET: ${{ secrets.DOCKER_DEPLOY_TOKEN }}
      with:
        # Username used to log in to a Docker registry. If not set then no login will occur
        username: meekrosoft
        # Password or personal access token used to log in to a Docker registry. If not set then no login will occur
        password: ${{ secrets.DOCKER_DEPLOY_TOKEN }}
        # Docker repository to tag the image with
        repository: merkely/change
        tags: master
        # Automatically tags the built image with the git short SHA as per the readme
        tag_with_sha: TRUE
        add_git_labels: TRUE


    - name: Get tagged Docker image name
      id: tagged_image
      run: |
        echo ::set-output name=value::merkely/change:sha-$(git log -1 --pretty=%h)


    - name: Declare Merkely pipeline
      env:
        MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
      run: |
        make branch merkely_declare_pipeline


    - name: Log Docker image to Merkely
      env:
        TAGGED_IMAGE: ${{ steps.tagged_image.outputs.value }}
        MERKELY_FINGERPRINT: docker://${TAGGED_IMAGE}
        MERKELY_IS_COMPLIANT: 'TRUE'
        MERKELY_ARTIFACT_GIT_COMMIT: ${GITHUB_SHA}
        MERKELY_ARTIFACT_GIT_URL: https://github.com/compliancedb/cdb_controls/commit/${GITHUB_SHA}
        MERKELY_CI_BUILD_NUMBER: ${GITHUB_RUN_ID}
        MERKELY_CI_BUILD_URL: https://github.com/compliancedb/cdb_controls/actions/runs/${GITHUB_RUN_ID}
        MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
      run: |
        make merkely_log_artifact


    - name: Log image deployment to Merkely
      env:
        TAGGED_IMAGE: ${{ steps.tagged_image.outputs.value }}
        MERKELY_FINGERPRINT: docker://${TAGGED_IMAGE}
        MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
        MERKELY_CI_BUILD_URL: https://github.com/compliancedb/cdb_controls/actions/runs/${GITHUB_RUN_ID}
        MERKELY_DESCRIPTION: "Deployment of ${TAGGED_IMAGE} to docker hub"
        MERKELY_ENVIRONMENT: 'docker_hub'
      run: |
        make merkely_log_deployment


    - name: Run tests
      run: |
        make build_all test_all


    - name: Log test results to Merkely
      env:
        CDB_API_TOKEN: ${{ secrets.CDB_API_TOKEN }}
        CDB_HOST: https://app.compliancedb.com
        CDB_CI_BUILD_URL: https://github.com/compliancedb/cdb_controls/actions/runs/${GITHUB_RUN_ID}
      run: |
        export SHA7=$(git log -1 --pretty=%h)
        export CDB_ARTIFACT_DOCKER_IMAGE=merkely/change:sha-${SHA7}

        export CDB_TEST_RESULTS=${PWD}/tmp/coverage/unit/htmlcov/junit.xml
        export CDB_EVIDENCE_TYPE="unit_test"
        make control_and_publish_junit_results

        export CDB_TEST_RESULTS=${PWD}/tmp/coverage/integration/htmlcov/junit.xml
        export CDB_EVIDENCE_TYPE="integration_test"
        make control_and_publish_junit_results


    - name: Archive code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: code-coverage-report
        path: tmp/coverage/


    - name: Log coverage evidence to Merkely
      env:
        TAGGED_IMAGE: ${{ steps.tagged_image.outputs.value }}
        MERKELY_FINGERPRINT: docker://${TAGGED_IMAGE}
        MERKELY_EVIDENCE_TYPE: "coverage"
        MERKELY_IS_COMPLIANT: 'TRUE'
        MERKELY_CI_BUILD_URL: https://github.com/compliancedb/cdb_controls/actions/runs/${GITHUB_RUN_ID}
        MERKELY_API_TOKEN: ${{ secrets.MERKELY_API_TOKEN }}
      run: |
        source tmp/coverage/unit/htmlcov/test_coverage.txt
        source tmp/coverage/unit/htmlcov/test_cases.txt
        export MERKELY_DESCRIPTION="${TEST_CASES} tests passed with ${COVERAGE} coverage"
        make merkely_log_evidence