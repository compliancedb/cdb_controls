# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request events
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world!
        
    - name: Build and push Docker images
      uses: docker/build-push-action@v1.1.0
      env:
        SUPER_SECRET: ${{ secrets.DOCKER_DEPLOY_TOKEN }}
      with:
        # Username used to log in to a Docker registry. If not set then no login will occur
        username: meekrosoft
        # Password or personal access token used to log in to a Docker registry. If not set then no login will occur
        password: ${{ secrets.DOCKER_DEPLOY_TOKEN }}
        # Docker repository to tag the image with
        repository: compliancedb/cdb_controls
        # Automatically tags the built image with the git reference as per the readme
        tag_with_ref: TRUE
        # Automatically tags the built image with the git short SHA as per the readme
        tag_with_sha: TRUE
        add_git_labels: TRUE


    # Runs a set of commands using the runners shell
    - name: Update compliancedb with the project and artifact information
      env:
        CDB_API_TOKEN: ${{ secrets.CDB_API_TOKEN }}
        CDB_HOST: https://app.compliancedb.com
        CDB_IS_COMPLIANT: TRUE
        CDB_ARTIFACT_GIT_URL: https://github.com/compliancedb/cdb_controls/commit/${GITHUB_SHA}
        CDB_ARTIFACT_GIT_COMMIT: ${GITHUB_SHA}
        CDB_CI_BUILD_URL: https://github.com/compliancedb/cdb_controls/actions/runs/${GITHUB_RUN_ID}
        CDB_BUILD_NUMBER: ${GITHUB_RUN_ID}
        CDB_DOCKER_IMAGE: compliancedb/cdb_controls
      run: |
        make put_project
        make put_artifact

    - name: Run unit tests
      env:
        CDB_API_TOKEN: ${{ secrets.CDB_API_TOKEN }}
      run: |
        make test

    - name: CDB Control Test Results
      env:
        CDB_API_TOKEN: ${{ secrets.CDB_API_TOKEN }}
        CDB_HOST: https://app.compliancedb.com
        CDB_BUILD_NUMBER: ${GITHUB_RUN_ID}
        CDB_CI_BUILD_URL: https://github.com/compliancedb/cdb_controls/actions/runs/${GITHUB_RUN_ID}
        CDB_DOCKER_IMAGE: compliancedb/cdb_controls
      run: |
        make control_and_publish_junit_results


    - name: Archive code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: code-coverage-report
        path: tmp/coverage/htmlcov/

    - name: Publish coverage results to ComplianceDB
      env:
        CDB_API_TOKEN: ${{ secrets.CDB_API_TOKEN }}
        CDB_HOST: https://app.compliancedb.com
        CDB_IS_COMPLIANT: TRUE
        CDB_EVIDENCE_TYPE: "unit_test"
        CDB_BUILD_NUMBER: ${GITHUB_RUN_ID}
        CDB_CI_BUILD_URL: https://github.com/compliancedb/cdb_controls/actions/runs/${GITHUB_RUN_ID}
        CDB_DOCKER_IMAGE: compliancedb/cdb_controls
      run: |
        source tmp/coverage/htmlcov/test_coverage.txt
        source tmp/coverage/htmlcov/test_cases.txt
        export CDB_DESCRIPTION="$TEST_CASES tests passed with $COVERAGE coverage"
        make publish_test_results