# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world!
        
    - name: Build and push Docker images
      uses: docker/build-push-action@v1.1.0
      env:
        SUPER_SECRET: ${{ secrets.DOCKER_DEPLOY_TOKEN }}
      with:
        # Username used to log in to a Docker registry. If not set then no login will occur
        username: meekrosoft
        # Password or personal access token used to log in to a Docker registry. If not set then no login will occur
        password: ${{ secrets.DOCKER_DEPLOY_TOKEN }}
        # Docker repository to tag the image with
        repository: compliancedb/cdb_controls
        # Comma-delimited list of tags. These will be added to the registry/repository to form the image's tags
        tags: latest
        # Automatically tags the built image with the git reference as per the readme
        tag_with_ref: TRUE
        # Automatically tags the built image with the git short SHA as per the readme
        tag_with_sha: TRUE
        add_git_labels: TRUE


    # Runs a set of commands using the runners shell
    - name: Update compliancedb with the project and artifact information
      env:
        CDB_API_TOKEN: ${{ secrets.CDB_API_TOKEN }}
      run: |
        docker run --rm --name comply \
                   --volume ${PWD}/project-master.json:/data/project.json \
                   --env CDB_HOST=https://app.compliancedb.com \
                   --env CDB_API_TOKEN=${CDB_API_TOKEN} \
                   compliancedb/cdb_controls python -m cdb.put_project -p /data/project.json
        docker run --rm --name comply \
                --volume ${PWD}/project-master.json:/data/project.json \
                --volume=/var/run/docker.sock:/var/run/docker.sock \
                --env CDB_HOST=https://app.compliancedb.com \
                --env CDB_IS_COMPLIANT=TRUE \
                --env CDB_ARTIFACT_GIT_URL=https://github.com/compliancedb/cdb_controls/commit/${GITHUB_SHA} \
                --env CDB_ARTIFACT_GIT_COMMIT=${GITHUB_SHA} \
                --env CDB_CI_BUILD_URL=https://github.com/compliancedb/cdb_controls/actions/runs/${GITHUB_RUN_ID} \
                --env CDB_BUILD_NUMBER=${GITHUB_RUN_ID} \
                --env CDB_DOCKER_IMAGE=compliancedb/cdb_controls \
                --env CDB_API_TOKEN=${CDB_API_TOKEN} \
                compliancedb/cdb_controls python -m cdb.put_artifact_image -p /data/project.json

    - name: Run unit tests
      env:
        CDB_API_TOKEN: ${{ secrets.CDB_API_TOKEN }}
      run: |
        docker run --name test_unit --rm --entrypoint ./coverage_entrypoint.sh compliancedb/cdb_controls
        ls tmp/coverage/htmlcov/
        pwd

    - name: Archive code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: code-coverage-report
        path: tmp/coverage/htmlcov/